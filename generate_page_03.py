import os
import json
import base64
from utils import generate_image_with_thucchien_ai

def generate_frame(prompt: str, output_filename: str, aspect_ratio: str = "16:9"):
    model = "imagen-4"

    print(f"ƒêang y√™u c·∫ßu sinh ·∫£nh cho khung h√¨nh: {output_filename} v·ªõi prompt: \"{prompt}\"")
    print(f"M√¥ h√¨nh: {model}, T·ª∑ l·ªá khung h√¨nh: {aspect_ratio}")

    try:
        response = generate_image_with_thucchien_ai(
            prompt=prompt,
            model=model,
            n=1,
            aspect_ratio=aspect_ratio
        )

        if "data" in response and response["data"]:
            first_image_data = response["data"][0]
            if "b64_json" in first_image_data and first_image_data["b64_json"]:
                image_b64 = first_image_data["b64_json"]
                print(f"ƒê√£ nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu h√¨nh ·∫£nh Base64 (d√†i {len(image_b64)} k√Ω t·ª±).")
                
                try:
                    image_bytes = base64.b64decode(image_b64)
                    with open(output_filename, "wb") as f:
                        f.write(image_bytes)
                    print(f"‚úÖ H√¨nh ·∫£nh {output_filename} ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng.")
                    
                except Exception as e:
                    print(f"‚ùå Kh√¥ng th·ªÉ gi·∫£i m√£ ho·∫∑c l∆∞u h√¨nh ·∫£nh {output_filename}: {e}")

            elif "url" in first_image_data and first_image_data["url"]:
                image_url = first_image_data["url"]
                print(f"‚úÖ ƒê√£ nh·∫≠n ƒë∆∞·ª£c URL h√¨nh ·∫£nh cho {output_filename}: {image_url}")
                print(f"B·∫°n c√≥ th·ªÉ t·∫£i h√¨nh ·∫£nh t·ª´ URL n√†y.")
            else:
                print(f"‚ùå Ph·∫£n h·ªìi h√¨nh ·∫£nh cho {output_filename} kh√¥ng ch·ª©a b64_json ho·∫∑c url h·ª£p l·ªá.")
                print(json.dumps(response, indent=2, ensure_ascii=False))
                
        elif "error" in response:
            print(f"‚ùå ƒê√£ x·∫£y ra l·ªói khi sinh ·∫£nh cho {output_filename}: {response['error']}")
            if "details" in response:
                print(f"Chi ti·∫øt: {response['details']}")
        else:
            print(f"‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá cho vi·ªác sinh ·∫£nh {output_filename}.")
            print(json.dumps(response, indent=2, ensure_ascii=False))

    except ValueError as e:
        print(f"‚ùå L·ªói c·∫•u h√¨nh: {e}")
        print("üí° H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng THUCCHIEN_AI_API_KEY")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")

def main():
    # Khung h√¨nh 1: Quang c·∫£nh Qu·∫£ng tr∆∞·ªùng Ba ƒê√¨nh t·∫≠p trung ƒë√¥ng ng∆∞·ªùi
    prompt_frame1 = """A wide shot of Ba Dinh Square in Hanoi, crowded with people and various military and civilian forces gathering for a national day celebration. The atmosphere is solemn and expectant. Flags and banners are visible. Bright daylight."""
    output_filename_frame1 = "page_03_frame_01.png"
    generate_frame(prompt_frame1, output_filename_frame1)

    # Khung h√¨nh 2: Nghi th·ª©c r∆∞·ªõc ƒëu·ªëc truy·ªÅn th·ªëng
    prompt_frame2 = """A traditional torch relay ceremony in Vietnam, with a torch being carried by a person in official attire. The torch represents the revolutionary fire and the will for independence. Focus on the torch and the solemnity of the moment."""
    output_filename_frame2 = "page_03_frame_02.png"
    generate_frame(prompt_frame2, output_filename_frame2)

    # Khung h√¨nh 3: Nghi th·ª©c ch√†o c·ªù
    prompt_frame3 = """A solemn flag-raising ceremony at Ba Dinh Square. Leaders of the Party and State, along with the entire populace, stand at attention, saluting the Vietnamese national flag as it is raised. Respectful and patriotic atmosphere. Clear blue sky."""
    output_filename_frame3 = "page_03_frame_03.png"
    generate_frame(prompt_frame3, output_filename_frame3)

if __name__ == "__main__":
    main()
