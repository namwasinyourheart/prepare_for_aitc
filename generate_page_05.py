import os
import json
import base64
from utils import generate_image_with_thucchien_ai

def generate_frame(prompt: str, output_filename: str, aspect_ratio: str = "16:9"):
    model = "imagen-4"

    print(f"ƒêang y√™u c·∫ßu sinh ·∫£nh cho khung h√¨nh: {output_filename} v·ªõi prompt: \"{prompt}\"")
    print(f"M√¥ h√¨nh: {model}, T·ª∑ l·ªá khung h√¨nh: {aspect_ratio}")

    try:
        response = generate_image_with_thucchien_ai(
            prompt=prompt,
            model=model,
            n=1,
            aspect_ratio=aspect_ratio
        )

        if "data" in response and response["data"]:
            first_image_data = response["data"][0]
            if "b64_json" in first_image_data and first_image_data["b64_json"]:
                image_b64 = first_image_data["b64_json"]
                print(f"ƒê√£ nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu h√¨nh ·∫£nh Base64 (d√†i {len(image_b64)} k√Ω t·ª±).")
                
                try:
                    image_bytes = base64.b64decode(image_b64)
                    with open(output_filename, "wb") as f:
                        f.write(image_bytes)
                    print(f"‚úÖ H√¨nh ·∫£nh {output_filename} ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng.")
                    
                except Exception as e:
                    print(f"‚ùå Kh√¥ng th·ªÉ gi·∫£i m√£ ho·∫∑c l∆∞u h√¨nh ·∫£nh {output_filename}: {e}")

            elif "url" in first_image_data and first_image_data["url"]:
                image_url = first_image_data["url"]
                print(f"‚úÖ ƒê√£ nh·∫≠n ƒë∆∞·ª£c URL h√¨nh ·∫£nh cho {output_filename}: {image_url}")
                print(f"B·∫°n c√≥ th·ªÉ t·∫£i h√¨nh ·∫£nh t·ª´ URL n√†y.")
            else:
                print(f"‚ùå Ph·∫£n h·ªìi h√¨nh ·∫£nh cho {output_filename} kh√¥ng ch·ª©a b64_json ho·∫∑c url h·ª£p l·ªá.")
                print(json.dumps(response, indent=2, ensure_ascii=False))
                
        elif "error" in response:
            print(f"‚ùå ƒê√£ x·∫£y ra l·ªói khi sinh ·∫£nh cho {output_filename}: {response['error']}")
            if "details" in response:
                print(f"Chi ti·∫øt: {response['details']}")
        else:
            print(f"‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá cho vi·ªác sinh ·∫£nh {output_filename}.")
            print(json.dumps(response, indent=2, ensure_ascii=False))

    except ValueError as e:
        print(f"‚ùå L·ªói c·∫•u h√¨nh: {e}")
        print("üí° H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng THUCCHIEN_AI_API_KEY")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")

def main():
    # Khung h√¨nh 1: C√°c kh·ªëi di·ªÖu binh c·ªßa c√°c l·ª±c l∆∞·ª£ng v≈© trang kh√°c
    prompt_frame1 = """A grand military parade at Ba Dinh Square in Hanoi, featuring various branches of the Vietnamese armed forces: Navy sailors, Air Force personnel, Border Guards, and Coast Guard units, marching in perfect synchronization. Emphasize their determination to protect national sovereignty. Bright, clear day."""
    output_filename_frame1 = "page_05_frame_01.png"
    generate_frame(prompt_frame1, output_filename_frame1)

    # Khung h√¨nh 2: C√°c kh·ªëi di·ªÖu h√†nh c·ªßa ƒëo√†n th·ªÉ v√† nh√¢n d√¢n
    prompt_frame2 = """A vibrant civilian parade at Ba Dinh Square, with various social organizations and people from all walks of life: workers, farmers, youth, women, intellectuals, marching together with flags, flowers, and banners. Show unity and collective effort in national development. Joyful and patriotic atmosphere."""
    output_filename_frame2 = "page_05_frame_02.png"
    generate_frame(prompt_frame2, output_filename_frame2)

    # Khung h√¨nh 3: Bi√™n ƒë·ªôi m√°y bay tr·ª±c thƒÉng mang c·ªù ƒê·∫£ng, c·ªù T·ªï qu·ªëc
    prompt_frame3 = """A formation of military helicopters flying over Ba Dinh Square, carrying large Party and National flags. The helicopters are soaring gracefully against a clear blue sky, creating a majestic and patriotic spectacle. Professional aerial photography."""
    output_filename_frame3 = "page_05_frame_03.png"
    generate_frame(prompt_frame3, output_filename_frame3)

if __name__ == "__main__":
    main()
